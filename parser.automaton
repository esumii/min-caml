State 0:
exp' -> . exp [ # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 98
-- On elems shift to state 32

State 1:
exp -> error . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On THEN reduce production exp -> error 
-- On SLASH_DOT reduce production exp -> error 
-- On SEMICOLON reduce production exp -> error 
-- On RPAREN reduce production exp -> error 
-- On PLUS_DOT reduce production exp -> error 
-- On PLUS reduce production exp -> error 
-- On MINUS_DOT reduce production exp -> error 
-- On MINUS reduce production exp -> error 
-- On LPAREN reduce production exp -> error 
-- On LESS_GREATER reduce production exp -> error 
-- On LESS_EQUAL reduce production exp -> error 
-- On LESS reduce production exp -> error 
-- On INT reduce production exp -> error 
-- On IN reduce production exp -> error 
-- On IDENT reduce production exp -> error 
-- On GREATER_EQUAL reduce production exp -> error 
-- On GREATER reduce production exp -> error 
-- On FLOAT reduce production exp -> error 
-- On EQUAL reduce production exp -> error 
-- On ELSE reduce production exp -> error 
-- On COMMA reduce production exp -> error 
-- On BOOL reduce production exp -> error 
-- On AST_DOT reduce production exp -> error 
-- On # reduce production exp -> error 

State 2:
exp -> NOT . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 97
-- On elems shift to state 32

State 3:
exp -> MINUS_DOT . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 96
-- On elems shift to state 32

State 4:
exp -> MINUS . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 95
-- On elems shift to state 32

State 5:
simple_exp -> LPAREN . exp RPAREN [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
simple_exp -> LPAREN . RPAREN [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On RPAREN shift to state 6
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 93
-- On elems shift to state 32

State 6:
simple_exp -> LPAREN RPAREN . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
-- On THEN reduce production simple_exp -> LPAREN RPAREN 
-- On SLASH_DOT reduce production simple_exp -> LPAREN RPAREN 
-- On SEMICOLON reduce production simple_exp -> LPAREN RPAREN 
-- On RPAREN reduce production simple_exp -> LPAREN RPAREN 
-- On PLUS_DOT reduce production simple_exp -> LPAREN RPAREN 
-- On PLUS reduce production simple_exp -> LPAREN RPAREN 
-- On MINUS_DOT reduce production simple_exp -> LPAREN RPAREN 
-- On MINUS reduce production simple_exp -> LPAREN RPAREN 
-- On LPAREN reduce production simple_exp -> LPAREN RPAREN 
-- On LESS_GREATER reduce production simple_exp -> LPAREN RPAREN 
-- On LESS_EQUAL reduce production simple_exp -> LPAREN RPAREN 
-- On LESS reduce production simple_exp -> LPAREN RPAREN 
-- On INT reduce production simple_exp -> LPAREN RPAREN 
-- On IN reduce production simple_exp -> LPAREN RPAREN 
-- On IDENT reduce production simple_exp -> LPAREN RPAREN 
-- On GREATER_EQUAL reduce production simple_exp -> LPAREN RPAREN 
-- On GREATER reduce production simple_exp -> LPAREN RPAREN 
-- On FLOAT reduce production simple_exp -> LPAREN RPAREN 
-- On EQUAL reduce production simple_exp -> LPAREN RPAREN 
-- On ELSE reduce production simple_exp -> LPAREN RPAREN 
-- On DOT reduce production simple_exp -> LPAREN RPAREN 
-- On COMMA reduce production simple_exp -> LPAREN RPAREN 
-- On BOOL reduce production simple_exp -> LPAREN RPAREN 
-- On AST_DOT reduce production simple_exp -> LPAREN RPAREN 
-- On # reduce production simple_exp -> LPAREN RPAREN 

State 7:
exp -> LET . IDENT EQUAL exp IN exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> LET . REC fundef IN exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> LET . LPAREN pat RPAREN EQUAL exp IN exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On REC shift to state 8
-- On LPAREN shift to state 76
-- On IDENT shift to state 88

State 8:
exp -> LET REC . fundef IN exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On IDENT shift to state 9
-- On fundef shift to state 73

State 9:
fundef -> IDENT . formal_args EQUAL exp [ IN ]
-- On IDENT shift to state 10
-- On formal_args shift to state 12

State 10:
formal_args -> IDENT . formal_args [ EQUAL ]
formal_args -> IDENT . [ EQUAL ]
-- On IDENT shift to state 10
-- On formal_args shift to state 11
-- On EQUAL reduce production formal_args -> IDENT 

State 11:
formal_args -> IDENT formal_args . [ EQUAL ]
-- On EQUAL reduce production formal_args -> IDENT formal_args 

State 12:
fundef -> IDENT formal_args . EQUAL exp [ IN ]
-- On EQUAL shift to state 13

State 13:
fundef -> IDENT formal_args EQUAL . exp [ IN ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 72
-- On elems shift to state 32

State 14:
simple_exp -> INT . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
-- On THEN reduce production simple_exp -> INT 
-- On SLASH_DOT reduce production simple_exp -> INT 
-- On SEMICOLON reduce production simple_exp -> INT 
-- On RPAREN reduce production simple_exp -> INT 
-- On PLUS_DOT reduce production simple_exp -> INT 
-- On PLUS reduce production simple_exp -> INT 
-- On MINUS_DOT reduce production simple_exp -> INT 
-- On MINUS reduce production simple_exp -> INT 
-- On LPAREN reduce production simple_exp -> INT 
-- On LESS_GREATER reduce production simple_exp -> INT 
-- On LESS_EQUAL reduce production simple_exp -> INT 
-- On LESS reduce production simple_exp -> INT 
-- On INT reduce production simple_exp -> INT 
-- On IN reduce production simple_exp -> INT 
-- On IDENT reduce production simple_exp -> INT 
-- On GREATER_EQUAL reduce production simple_exp -> INT 
-- On GREATER reduce production simple_exp -> INT 
-- On FLOAT reduce production simple_exp -> INT 
-- On EQUAL reduce production simple_exp -> INT 
-- On ELSE reduce production simple_exp -> INT 
-- On DOT reduce production simple_exp -> INT 
-- On COMMA reduce production simple_exp -> INT 
-- On BOOL reduce production simple_exp -> INT 
-- On AST_DOT reduce production simple_exp -> INT 
-- On # reduce production simple_exp -> INT 

State 15:
exp -> IF . exp THEN exp ELSE exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 67
-- On elems shift to state 32

State 16:
simple_exp -> IDENT . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
-- On THEN reduce production simple_exp -> IDENT 
-- On SLASH_DOT reduce production simple_exp -> IDENT 
-- On SEMICOLON reduce production simple_exp -> IDENT 
-- On RPAREN reduce production simple_exp -> IDENT 
-- On PLUS_DOT reduce production simple_exp -> IDENT 
-- On PLUS reduce production simple_exp -> IDENT 
-- On MINUS_DOT reduce production simple_exp -> IDENT 
-- On MINUS reduce production simple_exp -> IDENT 
-- On LPAREN reduce production simple_exp -> IDENT 
-- On LESS_GREATER reduce production simple_exp -> IDENT 
-- On LESS_EQUAL reduce production simple_exp -> IDENT 
-- On LESS reduce production simple_exp -> IDENT 
-- On INT reduce production simple_exp -> IDENT 
-- On IN reduce production simple_exp -> IDENT 
-- On IDENT reduce production simple_exp -> IDENT 
-- On GREATER_EQUAL reduce production simple_exp -> IDENT 
-- On GREATER reduce production simple_exp -> IDENT 
-- On FLOAT reduce production simple_exp -> IDENT 
-- On EQUAL reduce production simple_exp -> IDENT 
-- On ELSE reduce production simple_exp -> IDENT 
-- On DOT reduce production simple_exp -> IDENT 
-- On COMMA reduce production simple_exp -> IDENT 
-- On BOOL reduce production simple_exp -> IDENT 
-- On AST_DOT reduce production simple_exp -> IDENT 
-- On # reduce production simple_exp -> IDENT 

State 17:
simple_exp -> FLOAT . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
-- On THEN reduce production simple_exp -> FLOAT 
-- On SLASH_DOT reduce production simple_exp -> FLOAT 
-- On SEMICOLON reduce production simple_exp -> FLOAT 
-- On RPAREN reduce production simple_exp -> FLOAT 
-- On PLUS_DOT reduce production simple_exp -> FLOAT 
-- On PLUS reduce production simple_exp -> FLOAT 
-- On MINUS_DOT reduce production simple_exp -> FLOAT 
-- On MINUS reduce production simple_exp -> FLOAT 
-- On LPAREN reduce production simple_exp -> FLOAT 
-- On LESS_GREATER reduce production simple_exp -> FLOAT 
-- On LESS_EQUAL reduce production simple_exp -> FLOAT 
-- On LESS reduce production simple_exp -> FLOAT 
-- On INT reduce production simple_exp -> FLOAT 
-- On IN reduce production simple_exp -> FLOAT 
-- On IDENT reduce production simple_exp -> FLOAT 
-- On GREATER_EQUAL reduce production simple_exp -> FLOAT 
-- On GREATER reduce production simple_exp -> FLOAT 
-- On FLOAT reduce production simple_exp -> FLOAT 
-- On EQUAL reduce production simple_exp -> FLOAT 
-- On ELSE reduce production simple_exp -> FLOAT 
-- On DOT reduce production simple_exp -> FLOAT 
-- On COMMA reduce production simple_exp -> FLOAT 
-- On BOOL reduce production simple_exp -> FLOAT 
-- On AST_DOT reduce production simple_exp -> FLOAT 
-- On # reduce production simple_exp -> FLOAT 

State 18:
simple_exp -> BOOL . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
-- On THEN reduce production simple_exp -> BOOL 
-- On SLASH_DOT reduce production simple_exp -> BOOL 
-- On SEMICOLON reduce production simple_exp -> BOOL 
-- On RPAREN reduce production simple_exp -> BOOL 
-- On PLUS_DOT reduce production simple_exp -> BOOL 
-- On PLUS reduce production simple_exp -> BOOL 
-- On MINUS_DOT reduce production simple_exp -> BOOL 
-- On MINUS reduce production simple_exp -> BOOL 
-- On LPAREN reduce production simple_exp -> BOOL 
-- On LESS_GREATER reduce production simple_exp -> BOOL 
-- On LESS_EQUAL reduce production simple_exp -> BOOL 
-- On LESS reduce production simple_exp -> BOOL 
-- On INT reduce production simple_exp -> BOOL 
-- On IN reduce production simple_exp -> BOOL 
-- On IDENT reduce production simple_exp -> BOOL 
-- On GREATER_EQUAL reduce production simple_exp -> BOOL 
-- On GREATER reduce production simple_exp -> BOOL 
-- On FLOAT reduce production simple_exp -> BOOL 
-- On EQUAL reduce production simple_exp -> BOOL 
-- On ELSE reduce production simple_exp -> BOOL 
-- On DOT reduce production simple_exp -> BOOL 
-- On COMMA reduce production simple_exp -> BOOL 
-- On BOOL reduce production simple_exp -> BOOL 
-- On AST_DOT reduce production simple_exp -> BOOL 
-- On # reduce production simple_exp -> BOOL 

State 19:
exp -> ARRAY_CREATE . simple_exp simple_exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On LPAREN shift to state 5
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On simple_exp shift to state 20

State 20:
exp -> ARRAY_CREATE simple_exp . simple_exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
simple_exp -> simple_exp . DOT LPAREN exp RPAREN [ LPAREN INT IDENT FLOAT DOT BOOL ]
-- On LPAREN shift to state 5
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On DOT shift to state 21
-- On BOOL shift to state 18
-- On simple_exp shift to state 66

State 21:
simple_exp -> simple_exp DOT . LPAREN exp RPAREN [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
-- On LPAREN shift to state 22

State 22:
simple_exp -> simple_exp DOT LPAREN . exp RPAREN [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 64
-- On elems shift to state 32

State 23:
exp -> simple_exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> simple_exp . DOT LPAREN exp RPAREN LESS_MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
simple_exp -> simple_exp . DOT LPAREN exp RPAREN [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
-- On DOT shift to state 24
-- On THEN reduce production exp -> simple_exp 
-- On SLASH_DOT reduce production exp -> simple_exp 
-- On SEMICOLON reduce production exp -> simple_exp 
-- On RPAREN reduce production exp -> simple_exp 
-- On PLUS_DOT reduce production exp -> simple_exp 
-- On PLUS reduce production exp -> simple_exp 
-- On MINUS_DOT reduce production exp -> simple_exp 
-- On MINUS reduce production exp -> simple_exp 
-- On LPAREN reduce production exp -> simple_exp 
-- On LESS_GREATER reduce production exp -> simple_exp 
-- On LESS_EQUAL reduce production exp -> simple_exp 
-- On LESS reduce production exp -> simple_exp 
-- On INT reduce production exp -> simple_exp 
-- On IN reduce production exp -> simple_exp 
-- On IDENT reduce production exp -> simple_exp 
-- On GREATER_EQUAL reduce production exp -> simple_exp 
-- On GREATER reduce production exp -> simple_exp 
-- On FLOAT reduce production exp -> simple_exp 
-- On EQUAL reduce production exp -> simple_exp 
-- On ELSE reduce production exp -> simple_exp 
-- On COMMA reduce production exp -> simple_exp 
-- On BOOL reduce production exp -> simple_exp 
-- On AST_DOT reduce production exp -> simple_exp 
-- On # reduce production exp -> simple_exp 

State 24:
exp -> simple_exp DOT . LPAREN exp RPAREN LESS_MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
simple_exp -> simple_exp DOT . LPAREN exp RPAREN [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
-- On LPAREN shift to state 25

State 25:
exp -> simple_exp DOT LPAREN . exp RPAREN LESS_MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
simple_exp -> simple_exp DOT LPAREN . exp RPAREN [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 26
-- On elems shift to state 32

State 26:
elems -> exp . COMMA exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . PLUS exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . MINUS exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . EQUAL exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS_GREATER exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . GREATER exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS_EQUAL exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . GREATER_EQUAL exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . PLUS_DOT exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . MINUS_DOT exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . AST_DOT exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . SLASH_DOT exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . actual_args [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> simple_exp DOT LPAREN exp . RPAREN LESS_MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
simple_exp -> simple_exp DOT LPAREN exp . RPAREN [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On SEMICOLON shift to state 57
-- On RPAREN shift to state 61
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On LESS_GREATER shift to state 45
-- On LESS_EQUAL shift to state 47
-- On LESS shift to state 49
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On GREATER_EQUAL shift to state 51
-- On GREATER shift to state 53
-- On FLOAT shift to state 17
-- On EQUAL shift to state 55
-- On COMMA shift to state 59
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30

State 27:
exp -> exp SLASH_DOT . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 28
-- On elems shift to state 32

State 28:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp SLASH_DOT exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On LPAREN shift to state 5
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> exp SLASH_DOT exp 
-- On SLASH_DOT reduce production exp -> exp SLASH_DOT exp 
-- On SEMICOLON reduce production exp -> exp SLASH_DOT exp 
-- On RPAREN reduce production exp -> exp SLASH_DOT exp 
-- On PLUS_DOT reduce production exp -> exp SLASH_DOT exp 
-- On PLUS reduce production exp -> exp SLASH_DOT exp 
-- On MINUS_DOT reduce production exp -> exp SLASH_DOT exp 
-- On MINUS reduce production exp -> exp SLASH_DOT exp 
-- On LPAREN reduce production exp -> exp SLASH_DOT exp 
-- On LESS_GREATER reduce production exp -> exp SLASH_DOT exp 
-- On LESS_EQUAL reduce production exp -> exp SLASH_DOT exp 
-- On LESS reduce production exp -> exp SLASH_DOT exp 
-- On INT reduce production exp -> exp SLASH_DOT exp 
-- On IN reduce production exp -> exp SLASH_DOT exp 
-- On IDENT reduce production exp -> exp SLASH_DOT exp 
-- On GREATER_EQUAL reduce production exp -> exp SLASH_DOT exp 
-- On GREATER reduce production exp -> exp SLASH_DOT exp 
-- On FLOAT reduce production exp -> exp SLASH_DOT exp 
-- On EQUAL reduce production exp -> exp SLASH_DOT exp 
-- On ELSE reduce production exp -> exp SLASH_DOT exp 
-- On COMMA reduce production exp -> exp SLASH_DOT exp 
-- On BOOL reduce production exp -> exp SLASH_DOT exp 
-- On AST_DOT reduce production exp -> exp SLASH_DOT exp 
-- On # reduce production exp -> exp SLASH_DOT exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 29:
actual_args -> simple_exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
simple_exp -> simple_exp . DOT LPAREN exp RPAREN [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
-- On DOT shift to state 21
-- On THEN reduce production actual_args -> simple_exp 
-- On SLASH_DOT reduce production actual_args -> simple_exp 
-- On SEMICOLON reduce production actual_args -> simple_exp 
-- On RPAREN reduce production actual_args -> simple_exp 
-- On PLUS_DOT reduce production actual_args -> simple_exp 
-- On PLUS reduce production actual_args -> simple_exp 
-- On MINUS_DOT reduce production actual_args -> simple_exp 
-- On MINUS reduce production actual_args -> simple_exp 
-- On LPAREN reduce production actual_args -> simple_exp 
-- On LESS_GREATER reduce production actual_args -> simple_exp 
-- On LESS_EQUAL reduce production actual_args -> simple_exp 
-- On LESS reduce production actual_args -> simple_exp 
-- On INT reduce production actual_args -> simple_exp 
-- On IN reduce production actual_args -> simple_exp 
-- On IDENT reduce production actual_args -> simple_exp 
-- On GREATER_EQUAL reduce production actual_args -> simple_exp 
-- On GREATER reduce production actual_args -> simple_exp 
-- On FLOAT reduce production actual_args -> simple_exp 
-- On EQUAL reduce production actual_args -> simple_exp 
-- On ELSE reduce production actual_args -> simple_exp 
-- On COMMA reduce production actual_args -> simple_exp 
-- On BOOL reduce production actual_args -> simple_exp 
-- On AST_DOT reduce production actual_args -> simple_exp 
-- On # reduce production actual_args -> simple_exp 

State 30:
actual_args -> actual_args . simple_exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp actual_args . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On LPAREN shift to state 5
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On simple_exp shift to state 31
-- On THEN reduce production exp -> exp actual_args 
-- On SLASH_DOT reduce production exp -> exp actual_args 
-- On SEMICOLON reduce production exp -> exp actual_args 
-- On RPAREN reduce production exp -> exp actual_args 
-- On PLUS_DOT reduce production exp -> exp actual_args 
-- On PLUS reduce production exp -> exp actual_args 
-- On MINUS_DOT reduce production exp -> exp actual_args 
-- On MINUS reduce production exp -> exp actual_args 
-- On LPAREN reduce production exp -> exp actual_args 
-- On LESS_GREATER reduce production exp -> exp actual_args 
-- On LESS_EQUAL reduce production exp -> exp actual_args 
-- On LESS reduce production exp -> exp actual_args 
-- On INT reduce production exp -> exp actual_args 
-- On IN reduce production exp -> exp actual_args 
-- On IDENT reduce production exp -> exp actual_args 
-- On GREATER_EQUAL reduce production exp -> exp actual_args 
-- On GREATER reduce production exp -> exp actual_args 
-- On FLOAT reduce production exp -> exp actual_args 
-- On EQUAL reduce production exp -> exp actual_args 
-- On ELSE reduce production exp -> exp actual_args 
-- On COMMA reduce production exp -> exp actual_args 
-- On BOOL reduce production exp -> exp actual_args 
-- On AST_DOT reduce production exp -> exp actual_args 
-- On # reduce production exp -> exp actual_args 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 31:
actual_args -> actual_args simple_exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
simple_exp -> simple_exp . DOT LPAREN exp RPAREN [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
-- On DOT shift to state 21
-- On THEN reduce production actual_args -> actual_args simple_exp 
-- On SLASH_DOT reduce production actual_args -> actual_args simple_exp 
-- On SEMICOLON reduce production actual_args -> actual_args simple_exp 
-- On RPAREN reduce production actual_args -> actual_args simple_exp 
-- On PLUS_DOT reduce production actual_args -> actual_args simple_exp 
-- On PLUS reduce production actual_args -> actual_args simple_exp 
-- On MINUS_DOT reduce production actual_args -> actual_args simple_exp 
-- On MINUS reduce production actual_args -> actual_args simple_exp 
-- On LPAREN reduce production actual_args -> actual_args simple_exp 
-- On LESS_GREATER reduce production actual_args -> actual_args simple_exp 
-- On LESS_EQUAL reduce production actual_args -> actual_args simple_exp 
-- On LESS reduce production actual_args -> actual_args simple_exp 
-- On INT reduce production actual_args -> actual_args simple_exp 
-- On IN reduce production actual_args -> actual_args simple_exp 
-- On IDENT reduce production actual_args -> actual_args simple_exp 
-- On GREATER_EQUAL reduce production actual_args -> actual_args simple_exp 
-- On GREATER reduce production actual_args -> actual_args simple_exp 
-- On FLOAT reduce production actual_args -> actual_args simple_exp 
-- On EQUAL reduce production actual_args -> actual_args simple_exp 
-- On ELSE reduce production actual_args -> actual_args simple_exp 
-- On COMMA reduce production actual_args -> actual_args simple_exp 
-- On BOOL reduce production actual_args -> actual_args simple_exp 
-- On AST_DOT reduce production actual_args -> actual_args simple_exp 
-- On # reduce production actual_args -> actual_args simple_exp 

State 32:
elems -> elems . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> elems . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On COMMA shift to state 33
-- On THEN reduce production exp -> elems 
-- On SLASH_DOT reduce production exp -> elems 
-- On SEMICOLON reduce production exp -> elems 
-- On RPAREN reduce production exp -> elems 
-- On PLUS_DOT reduce production exp -> elems 
-- On PLUS reduce production exp -> elems 
-- On MINUS_DOT reduce production exp -> elems 
-- On MINUS reduce production exp -> elems 
-- On LPAREN reduce production exp -> elems 
-- On LESS_GREATER reduce production exp -> elems 
-- On LESS_EQUAL reduce production exp -> elems 
-- On LESS reduce production exp -> elems 
-- On INT reduce production exp -> elems 
-- On IN reduce production exp -> elems 
-- On IDENT reduce production exp -> elems 
-- On GREATER_EQUAL reduce production exp -> elems 
-- On GREATER reduce production exp -> elems 
-- On FLOAT reduce production exp -> elems 
-- On EQUAL reduce production exp -> elems 
-- On ELSE reduce production exp -> elems 
-- On COMMA reduce production exp -> elems 
-- On BOOL reduce production exp -> elems 
-- On AST_DOT reduce production exp -> elems 
-- On # reduce production exp -> elems 
** Conflict on COMMA

State 33:
elems -> elems COMMA . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 34
-- On elems shift to state 32

State 34:
elems -> elems COMMA exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On LESS_GREATER shift to state 45
-- On LESS_EQUAL shift to state 47
-- On LESS shift to state 49
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On GREATER_EQUAL shift to state 51
-- On GREATER shift to state 53
-- On FLOAT shift to state 17
-- On EQUAL shift to state 55
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production elems -> elems COMMA exp 
-- On SEMICOLON reduce production elems -> elems COMMA exp 
-- On RPAREN reduce production elems -> elems COMMA exp 
-- On LPAREN reduce production elems -> elems COMMA exp 
-- On INT reduce production elems -> elems COMMA exp 
-- On IN reduce production elems -> elems COMMA exp 
-- On IDENT reduce production elems -> elems COMMA exp 
-- On FLOAT reduce production elems -> elems COMMA exp 
-- On ELSE reduce production elems -> elems COMMA exp 
-- On COMMA reduce production elems -> elems COMMA exp 
-- On BOOL reduce production elems -> elems COMMA exp 
-- On # reduce production elems -> elems COMMA exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 35:
exp -> exp PLUS_DOT . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 36
-- On elems shift to state 32

State 36:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp PLUS_DOT exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On LPAREN shift to state 5
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> exp PLUS_DOT exp 
-- On SEMICOLON reduce production exp -> exp PLUS_DOT exp 
-- On RPAREN reduce production exp -> exp PLUS_DOT exp 
-- On PLUS_DOT reduce production exp -> exp PLUS_DOT exp 
-- On PLUS reduce production exp -> exp PLUS_DOT exp 
-- On MINUS_DOT reduce production exp -> exp PLUS_DOT exp 
-- On MINUS reduce production exp -> exp PLUS_DOT exp 
-- On LPAREN reduce production exp -> exp PLUS_DOT exp 
-- On LESS_GREATER reduce production exp -> exp PLUS_DOT exp 
-- On LESS_EQUAL reduce production exp -> exp PLUS_DOT exp 
-- On LESS reduce production exp -> exp PLUS_DOT exp 
-- On INT reduce production exp -> exp PLUS_DOT exp 
-- On IN reduce production exp -> exp PLUS_DOT exp 
-- On IDENT reduce production exp -> exp PLUS_DOT exp 
-- On GREATER_EQUAL reduce production exp -> exp PLUS_DOT exp 
-- On GREATER reduce production exp -> exp PLUS_DOT exp 
-- On FLOAT reduce production exp -> exp PLUS_DOT exp 
-- On EQUAL reduce production exp -> exp PLUS_DOT exp 
-- On ELSE reduce production exp -> exp PLUS_DOT exp 
-- On COMMA reduce production exp -> exp PLUS_DOT exp 
-- On BOOL reduce production exp -> exp PLUS_DOT exp 
-- On # reduce production exp -> exp PLUS_DOT exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 37:
exp -> exp AST_DOT . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 38
-- On elems shift to state 32

State 38:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp AST_DOT exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On LPAREN shift to state 5
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> exp AST_DOT exp 
-- On SLASH_DOT reduce production exp -> exp AST_DOT exp 
-- On SEMICOLON reduce production exp -> exp AST_DOT exp 
-- On RPAREN reduce production exp -> exp AST_DOT exp 
-- On PLUS_DOT reduce production exp -> exp AST_DOT exp 
-- On PLUS reduce production exp -> exp AST_DOT exp 
-- On MINUS_DOT reduce production exp -> exp AST_DOT exp 
-- On MINUS reduce production exp -> exp AST_DOT exp 
-- On LPAREN reduce production exp -> exp AST_DOT exp 
-- On LESS_GREATER reduce production exp -> exp AST_DOT exp 
-- On LESS_EQUAL reduce production exp -> exp AST_DOT exp 
-- On LESS reduce production exp -> exp AST_DOT exp 
-- On INT reduce production exp -> exp AST_DOT exp 
-- On IN reduce production exp -> exp AST_DOT exp 
-- On IDENT reduce production exp -> exp AST_DOT exp 
-- On GREATER_EQUAL reduce production exp -> exp AST_DOT exp 
-- On GREATER reduce production exp -> exp AST_DOT exp 
-- On FLOAT reduce production exp -> exp AST_DOT exp 
-- On EQUAL reduce production exp -> exp AST_DOT exp 
-- On ELSE reduce production exp -> exp AST_DOT exp 
-- On COMMA reduce production exp -> exp AST_DOT exp 
-- On BOOL reduce production exp -> exp AST_DOT exp 
-- On AST_DOT reduce production exp -> exp AST_DOT exp 
-- On # reduce production exp -> exp AST_DOT exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 39:
exp -> exp PLUS . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 40
-- On elems shift to state 32

State 40:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp PLUS exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On LPAREN shift to state 5
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> exp PLUS exp 
-- On SEMICOLON reduce production exp -> exp PLUS exp 
-- On RPAREN reduce production exp -> exp PLUS exp 
-- On PLUS_DOT reduce production exp -> exp PLUS exp 
-- On PLUS reduce production exp -> exp PLUS exp 
-- On MINUS_DOT reduce production exp -> exp PLUS exp 
-- On MINUS reduce production exp -> exp PLUS exp 
-- On LPAREN reduce production exp -> exp PLUS exp 
-- On LESS_GREATER reduce production exp -> exp PLUS exp 
-- On LESS_EQUAL reduce production exp -> exp PLUS exp 
-- On LESS reduce production exp -> exp PLUS exp 
-- On INT reduce production exp -> exp PLUS exp 
-- On IN reduce production exp -> exp PLUS exp 
-- On IDENT reduce production exp -> exp PLUS exp 
-- On GREATER_EQUAL reduce production exp -> exp PLUS exp 
-- On GREATER reduce production exp -> exp PLUS exp 
-- On FLOAT reduce production exp -> exp PLUS exp 
-- On EQUAL reduce production exp -> exp PLUS exp 
-- On ELSE reduce production exp -> exp PLUS exp 
-- On COMMA reduce production exp -> exp PLUS exp 
-- On BOOL reduce production exp -> exp PLUS exp 
-- On # reduce production exp -> exp PLUS exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 41:
exp -> exp MINUS_DOT . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 42
-- On elems shift to state 32

State 42:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp MINUS_DOT exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On LPAREN shift to state 5
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> exp MINUS_DOT exp 
-- On SEMICOLON reduce production exp -> exp MINUS_DOT exp 
-- On RPAREN reduce production exp -> exp MINUS_DOT exp 
-- On PLUS_DOT reduce production exp -> exp MINUS_DOT exp 
-- On PLUS reduce production exp -> exp MINUS_DOT exp 
-- On MINUS_DOT reduce production exp -> exp MINUS_DOT exp 
-- On MINUS reduce production exp -> exp MINUS_DOT exp 
-- On LPAREN reduce production exp -> exp MINUS_DOT exp 
-- On LESS_GREATER reduce production exp -> exp MINUS_DOT exp 
-- On LESS_EQUAL reduce production exp -> exp MINUS_DOT exp 
-- On LESS reduce production exp -> exp MINUS_DOT exp 
-- On INT reduce production exp -> exp MINUS_DOT exp 
-- On IN reduce production exp -> exp MINUS_DOT exp 
-- On IDENT reduce production exp -> exp MINUS_DOT exp 
-- On GREATER_EQUAL reduce production exp -> exp MINUS_DOT exp 
-- On GREATER reduce production exp -> exp MINUS_DOT exp 
-- On FLOAT reduce production exp -> exp MINUS_DOT exp 
-- On EQUAL reduce production exp -> exp MINUS_DOT exp 
-- On ELSE reduce production exp -> exp MINUS_DOT exp 
-- On COMMA reduce production exp -> exp MINUS_DOT exp 
-- On BOOL reduce production exp -> exp MINUS_DOT exp 
-- On # reduce production exp -> exp MINUS_DOT exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 43:
exp -> exp MINUS . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 44
-- On elems shift to state 32

State 44:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp MINUS exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On LPAREN shift to state 5
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> exp MINUS exp 
-- On SEMICOLON reduce production exp -> exp MINUS exp 
-- On RPAREN reduce production exp -> exp MINUS exp 
-- On PLUS_DOT reduce production exp -> exp MINUS exp 
-- On PLUS reduce production exp -> exp MINUS exp 
-- On MINUS_DOT reduce production exp -> exp MINUS exp 
-- On MINUS reduce production exp -> exp MINUS exp 
-- On LPAREN reduce production exp -> exp MINUS exp 
-- On LESS_GREATER reduce production exp -> exp MINUS exp 
-- On LESS_EQUAL reduce production exp -> exp MINUS exp 
-- On LESS reduce production exp -> exp MINUS exp 
-- On INT reduce production exp -> exp MINUS exp 
-- On IN reduce production exp -> exp MINUS exp 
-- On IDENT reduce production exp -> exp MINUS exp 
-- On GREATER_EQUAL reduce production exp -> exp MINUS exp 
-- On GREATER reduce production exp -> exp MINUS exp 
-- On FLOAT reduce production exp -> exp MINUS exp 
-- On EQUAL reduce production exp -> exp MINUS exp 
-- On ELSE reduce production exp -> exp MINUS exp 
-- On COMMA reduce production exp -> exp MINUS exp 
-- On BOOL reduce production exp -> exp MINUS exp 
-- On # reduce production exp -> exp MINUS exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 45:
exp -> exp LESS_GREATER . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 46
-- On elems shift to state 32

State 46:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp LESS_GREATER exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> exp LESS_GREATER exp 
-- On SEMICOLON reduce production exp -> exp LESS_GREATER exp 
-- On RPAREN reduce production exp -> exp LESS_GREATER exp 
-- On LPAREN reduce production exp -> exp LESS_GREATER exp 
-- On LESS_GREATER reduce production exp -> exp LESS_GREATER exp 
-- On LESS_EQUAL reduce production exp -> exp LESS_GREATER exp 
-- On LESS reduce production exp -> exp LESS_GREATER exp 
-- On INT reduce production exp -> exp LESS_GREATER exp 
-- On IN reduce production exp -> exp LESS_GREATER exp 
-- On IDENT reduce production exp -> exp LESS_GREATER exp 
-- On GREATER_EQUAL reduce production exp -> exp LESS_GREATER exp 
-- On GREATER reduce production exp -> exp LESS_GREATER exp 
-- On FLOAT reduce production exp -> exp LESS_GREATER exp 
-- On EQUAL reduce production exp -> exp LESS_GREATER exp 
-- On ELSE reduce production exp -> exp LESS_GREATER exp 
-- On COMMA reduce production exp -> exp LESS_GREATER exp 
-- On BOOL reduce production exp -> exp LESS_GREATER exp 
-- On # reduce production exp -> exp LESS_GREATER exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 47:
exp -> exp LESS_EQUAL . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 48
-- On elems shift to state 32

State 48:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp LESS_EQUAL exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> exp LESS_EQUAL exp 
-- On SEMICOLON reduce production exp -> exp LESS_EQUAL exp 
-- On RPAREN reduce production exp -> exp LESS_EQUAL exp 
-- On LPAREN reduce production exp -> exp LESS_EQUAL exp 
-- On LESS_GREATER reduce production exp -> exp LESS_EQUAL exp 
-- On LESS_EQUAL reduce production exp -> exp LESS_EQUAL exp 
-- On LESS reduce production exp -> exp LESS_EQUAL exp 
-- On INT reduce production exp -> exp LESS_EQUAL exp 
-- On IN reduce production exp -> exp LESS_EQUAL exp 
-- On IDENT reduce production exp -> exp LESS_EQUAL exp 
-- On GREATER_EQUAL reduce production exp -> exp LESS_EQUAL exp 
-- On GREATER reduce production exp -> exp LESS_EQUAL exp 
-- On FLOAT reduce production exp -> exp LESS_EQUAL exp 
-- On EQUAL reduce production exp -> exp LESS_EQUAL exp 
-- On ELSE reduce production exp -> exp LESS_EQUAL exp 
-- On COMMA reduce production exp -> exp LESS_EQUAL exp 
-- On BOOL reduce production exp -> exp LESS_EQUAL exp 
-- On # reduce production exp -> exp LESS_EQUAL exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 49:
exp -> exp LESS . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 50
-- On elems shift to state 32

State 50:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp LESS exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> exp LESS exp 
-- On SEMICOLON reduce production exp -> exp LESS exp 
-- On RPAREN reduce production exp -> exp LESS exp 
-- On LPAREN reduce production exp -> exp LESS exp 
-- On LESS_GREATER reduce production exp -> exp LESS exp 
-- On LESS_EQUAL reduce production exp -> exp LESS exp 
-- On LESS reduce production exp -> exp LESS exp 
-- On INT reduce production exp -> exp LESS exp 
-- On IN reduce production exp -> exp LESS exp 
-- On IDENT reduce production exp -> exp LESS exp 
-- On GREATER_EQUAL reduce production exp -> exp LESS exp 
-- On GREATER reduce production exp -> exp LESS exp 
-- On FLOAT reduce production exp -> exp LESS exp 
-- On EQUAL reduce production exp -> exp LESS exp 
-- On ELSE reduce production exp -> exp LESS exp 
-- On COMMA reduce production exp -> exp LESS exp 
-- On BOOL reduce production exp -> exp LESS exp 
-- On # reduce production exp -> exp LESS exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 51:
exp -> exp GREATER_EQUAL . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 52
-- On elems shift to state 32

State 52:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp GREATER_EQUAL exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> exp GREATER_EQUAL exp 
-- On SEMICOLON reduce production exp -> exp GREATER_EQUAL exp 
-- On RPAREN reduce production exp -> exp GREATER_EQUAL exp 
-- On LPAREN reduce production exp -> exp GREATER_EQUAL exp 
-- On LESS_GREATER reduce production exp -> exp GREATER_EQUAL exp 
-- On LESS_EQUAL reduce production exp -> exp GREATER_EQUAL exp 
-- On LESS reduce production exp -> exp GREATER_EQUAL exp 
-- On INT reduce production exp -> exp GREATER_EQUAL exp 
-- On IN reduce production exp -> exp GREATER_EQUAL exp 
-- On IDENT reduce production exp -> exp GREATER_EQUAL exp 
-- On GREATER_EQUAL reduce production exp -> exp GREATER_EQUAL exp 
-- On GREATER reduce production exp -> exp GREATER_EQUAL exp 
-- On FLOAT reduce production exp -> exp GREATER_EQUAL exp 
-- On EQUAL reduce production exp -> exp GREATER_EQUAL exp 
-- On ELSE reduce production exp -> exp GREATER_EQUAL exp 
-- On COMMA reduce production exp -> exp GREATER_EQUAL exp 
-- On BOOL reduce production exp -> exp GREATER_EQUAL exp 
-- On # reduce production exp -> exp GREATER_EQUAL exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 53:
exp -> exp GREATER . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 54
-- On elems shift to state 32

State 54:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp GREATER exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> exp GREATER exp 
-- On SEMICOLON reduce production exp -> exp GREATER exp 
-- On RPAREN reduce production exp -> exp GREATER exp 
-- On LPAREN reduce production exp -> exp GREATER exp 
-- On LESS_GREATER reduce production exp -> exp GREATER exp 
-- On LESS_EQUAL reduce production exp -> exp GREATER exp 
-- On LESS reduce production exp -> exp GREATER exp 
-- On INT reduce production exp -> exp GREATER exp 
-- On IN reduce production exp -> exp GREATER exp 
-- On IDENT reduce production exp -> exp GREATER exp 
-- On GREATER_EQUAL reduce production exp -> exp GREATER exp 
-- On GREATER reduce production exp -> exp GREATER exp 
-- On FLOAT reduce production exp -> exp GREATER exp 
-- On EQUAL reduce production exp -> exp GREATER exp 
-- On ELSE reduce production exp -> exp GREATER exp 
-- On COMMA reduce production exp -> exp GREATER exp 
-- On BOOL reduce production exp -> exp GREATER exp 
-- On # reduce production exp -> exp GREATER exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 55:
exp -> exp EQUAL . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 56
-- On elems shift to state 32

State 56:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp EQUAL exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> exp EQUAL exp 
-- On SEMICOLON reduce production exp -> exp EQUAL exp 
-- On RPAREN reduce production exp -> exp EQUAL exp 
-- On LPAREN reduce production exp -> exp EQUAL exp 
-- On LESS_GREATER reduce production exp -> exp EQUAL exp 
-- On LESS_EQUAL reduce production exp -> exp EQUAL exp 
-- On LESS reduce production exp -> exp EQUAL exp 
-- On INT reduce production exp -> exp EQUAL exp 
-- On IN reduce production exp -> exp EQUAL exp 
-- On IDENT reduce production exp -> exp EQUAL exp 
-- On GREATER_EQUAL reduce production exp -> exp EQUAL exp 
-- On GREATER reduce production exp -> exp EQUAL exp 
-- On FLOAT reduce production exp -> exp EQUAL exp 
-- On EQUAL reduce production exp -> exp EQUAL exp 
-- On ELSE reduce production exp -> exp EQUAL exp 
-- On COMMA reduce production exp -> exp EQUAL exp 
-- On BOOL reduce production exp -> exp EQUAL exp 
-- On # reduce production exp -> exp EQUAL exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 57:
exp -> exp SEMICOLON . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 58
-- On elems shift to state 32

State 58:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp SEMICOLON exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On SEMICOLON shift to state 57
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On LESS_GREATER shift to state 45
-- On LESS_EQUAL shift to state 47
-- On LESS shift to state 49
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On GREATER_EQUAL shift to state 51
-- On GREATER shift to state 53
-- On FLOAT shift to state 17
-- On EQUAL shift to state 55
-- On COMMA shift to state 59
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> exp SEMICOLON exp 
-- On RPAREN reduce production exp -> exp SEMICOLON exp 
-- On LPAREN reduce production exp -> exp SEMICOLON exp 
-- On INT reduce production exp -> exp SEMICOLON exp 
-- On IN reduce production exp -> exp SEMICOLON exp 
-- On IDENT reduce production exp -> exp SEMICOLON exp 
-- On FLOAT reduce production exp -> exp SEMICOLON exp 
-- On ELSE reduce production exp -> exp SEMICOLON exp 
-- On BOOL reduce production exp -> exp SEMICOLON exp 
-- On # reduce production exp -> exp SEMICOLON exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 59:
elems -> exp COMMA . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 60
-- On elems shift to state 32

State 60:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
elems -> exp COMMA exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On LESS_GREATER shift to state 45
-- On LESS_EQUAL shift to state 47
-- On LESS shift to state 49
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On GREATER_EQUAL shift to state 51
-- On GREATER shift to state 53
-- On FLOAT shift to state 17
-- On EQUAL shift to state 55
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production elems -> exp COMMA exp 
-- On SEMICOLON reduce production elems -> exp COMMA exp 
-- On RPAREN reduce production elems -> exp COMMA exp 
-- On LPAREN reduce production elems -> exp COMMA exp 
-- On INT reduce production elems -> exp COMMA exp 
-- On IN reduce production elems -> exp COMMA exp 
-- On IDENT reduce production elems -> exp COMMA exp 
-- On FLOAT reduce production elems -> exp COMMA exp 
-- On ELSE reduce production elems -> exp COMMA exp 
-- On COMMA reduce production elems -> exp COMMA exp 
-- On BOOL reduce production elems -> exp COMMA exp 
-- On # reduce production elems -> exp COMMA exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 61:
exp -> simple_exp DOT LPAREN exp RPAREN . LESS_MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
simple_exp -> simple_exp DOT LPAREN exp RPAREN . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
-- On LESS_MINUS shift to state 62
-- On THEN reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On SLASH_DOT reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On SEMICOLON reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On RPAREN reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On PLUS_DOT reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On PLUS reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On MINUS_DOT reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On MINUS reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On LPAREN reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On LESS_GREATER reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On LESS_EQUAL reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On LESS reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On INT reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On IN reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On IDENT reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On GREATER_EQUAL reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On GREATER reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On FLOAT reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On EQUAL reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On ELSE reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On DOT reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On COMMA reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On BOOL reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On AST_DOT reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On # reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 

State 62:
exp -> simple_exp DOT LPAREN exp RPAREN LESS_MINUS . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 63
-- On elems shift to state 32

State 63:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> simple_exp DOT LPAREN exp RPAREN LESS_MINUS exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On LESS_GREATER shift to state 45
-- On LESS_EQUAL shift to state 47
-- On LESS shift to state 49
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On GREATER_EQUAL shift to state 51
-- On GREATER shift to state 53
-- On FLOAT shift to state 17
-- On EQUAL shift to state 55
-- On COMMA shift to state 59
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> simple_exp DOT LPAREN exp RPAREN LESS_MINUS exp 
-- On SEMICOLON reduce production exp -> simple_exp DOT LPAREN exp RPAREN LESS_MINUS exp 
-- On RPAREN reduce production exp -> simple_exp DOT LPAREN exp RPAREN LESS_MINUS exp 
-- On LPAREN reduce production exp -> simple_exp DOT LPAREN exp RPAREN LESS_MINUS exp 
-- On INT reduce production exp -> simple_exp DOT LPAREN exp RPAREN LESS_MINUS exp 
-- On IN reduce production exp -> simple_exp DOT LPAREN exp RPAREN LESS_MINUS exp 
-- On IDENT reduce production exp -> simple_exp DOT LPAREN exp RPAREN LESS_MINUS exp 
-- On FLOAT reduce production exp -> simple_exp DOT LPAREN exp RPAREN LESS_MINUS exp 
-- On ELSE reduce production exp -> simple_exp DOT LPAREN exp RPAREN LESS_MINUS exp 
-- On BOOL reduce production exp -> simple_exp DOT LPAREN exp RPAREN LESS_MINUS exp 
-- On # reduce production exp -> simple_exp DOT LPAREN exp RPAREN LESS_MINUS exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 64:
elems -> exp . COMMA exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . PLUS exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . MINUS exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . EQUAL exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS_GREATER exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . GREATER exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS_EQUAL exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . GREATER_EQUAL exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . PLUS_DOT exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . MINUS_DOT exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . AST_DOT exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . SLASH_DOT exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . actual_args [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . SEMICOLON exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
simple_exp -> simple_exp DOT LPAREN exp . RPAREN [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On SEMICOLON shift to state 57
-- On RPAREN shift to state 65
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On LESS_GREATER shift to state 45
-- On LESS_EQUAL shift to state 47
-- On LESS shift to state 49
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On GREATER_EQUAL shift to state 51
-- On GREATER shift to state 53
-- On FLOAT shift to state 17
-- On EQUAL shift to state 55
-- On COMMA shift to state 59
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30

State 65:
simple_exp -> simple_exp DOT LPAREN exp RPAREN . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
-- On THEN reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On SLASH_DOT reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On SEMICOLON reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On RPAREN reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On PLUS_DOT reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On PLUS reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On MINUS_DOT reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On MINUS reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On LPAREN reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On LESS_GREATER reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On LESS_EQUAL reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On LESS reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On INT reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On IN reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On IDENT reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On GREATER_EQUAL reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On GREATER reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On FLOAT reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On EQUAL reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On ELSE reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On DOT reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On COMMA reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On BOOL reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On AST_DOT reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
-- On # reduce production simple_exp -> simple_exp DOT LPAREN exp RPAREN 

State 66:
exp -> ARRAY_CREATE simple_exp simple_exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
simple_exp -> simple_exp . DOT LPAREN exp RPAREN [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
-- On DOT shift to state 21
-- On THEN reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On SLASH_DOT reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On SEMICOLON reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On RPAREN reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On PLUS_DOT reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On PLUS reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On MINUS_DOT reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On MINUS reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On LPAREN reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On LESS_GREATER reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On LESS_EQUAL reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On LESS reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On INT reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On IN reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On IDENT reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On GREATER_EQUAL reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On GREATER reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On FLOAT reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On EQUAL reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On ELSE reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On COMMA reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On BOOL reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On AST_DOT reduce production exp -> ARRAY_CREATE simple_exp simple_exp 
-- On # reduce production exp -> ARRAY_CREATE simple_exp simple_exp 

State 67:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> IF exp . THEN exp ELSE exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
-- On THEN shift to state 68
-- On SLASH_DOT shift to state 27
-- On SEMICOLON shift to state 57
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On LESS_GREATER shift to state 45
-- On LESS_EQUAL shift to state 47
-- On LESS shift to state 49
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On GREATER_EQUAL shift to state 51
-- On GREATER shift to state 53
-- On FLOAT shift to state 17
-- On EQUAL shift to state 55
-- On COMMA shift to state 59
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30

State 68:
exp -> IF exp THEN . exp ELSE exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 69
-- On elems shift to state 32

State 69:
elems -> exp . COMMA exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT ]
exp -> exp . PLUS exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT ]
exp -> exp . MINUS exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT ]
exp -> exp . EQUAL exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT ]
exp -> exp . LESS_GREATER exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT ]
exp -> exp . LESS exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT ]
exp -> exp . GREATER exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT ]
exp -> exp . LESS_EQUAL exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT ]
exp -> exp . GREATER_EQUAL exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT ]
exp -> IF exp THEN exp . ELSE exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT ]
exp -> exp . MINUS_DOT exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT ]
exp -> exp . AST_DOT exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT ]
exp -> exp . SLASH_DOT exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT ]
exp -> exp . actual_args [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT ]
exp -> exp . SEMICOLON exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT ]
-- On SLASH_DOT shift to state 27
-- On SEMICOLON shift to state 57
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On LESS_GREATER shift to state 45
-- On LESS_EQUAL shift to state 47
-- On LESS shift to state 49
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On GREATER_EQUAL shift to state 51
-- On GREATER shift to state 53
-- On FLOAT shift to state 17
-- On EQUAL shift to state 55
-- On ELSE shift to state 70
-- On COMMA shift to state 59
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30

State 70:
exp -> IF exp THEN exp ELSE . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 71
-- On elems shift to state 32

State 71:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> IF exp THEN exp ELSE exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On LESS_GREATER shift to state 45
-- On LESS_EQUAL shift to state 47
-- On LESS shift to state 49
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On GREATER_EQUAL shift to state 51
-- On GREATER shift to state 53
-- On FLOAT shift to state 17
-- On EQUAL shift to state 55
-- On COMMA shift to state 59
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> IF exp THEN exp ELSE exp 
-- On SEMICOLON reduce production exp -> IF exp THEN exp ELSE exp 
-- On RPAREN reduce production exp -> IF exp THEN exp ELSE exp 
-- On LPAREN reduce production exp -> IF exp THEN exp ELSE exp 
-- On INT reduce production exp -> IF exp THEN exp ELSE exp 
-- On IN reduce production exp -> IF exp THEN exp ELSE exp 
-- On IDENT reduce production exp -> IF exp THEN exp ELSE exp 
-- On FLOAT reduce production exp -> IF exp THEN exp ELSE exp 
-- On ELSE reduce production exp -> IF exp THEN exp ELSE exp 
-- On BOOL reduce production exp -> IF exp THEN exp ELSE exp 
-- On # reduce production exp -> IF exp THEN exp ELSE exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 72:
elems -> exp . COMMA exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . PLUS exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . MINUS exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . EQUAL exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS_GREATER exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . GREATER exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS_EQUAL exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . GREATER_EQUAL exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . PLUS_DOT exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . MINUS_DOT exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . AST_DOT exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . SLASH_DOT exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . actual_args [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . SEMICOLON exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
fundef -> IDENT formal_args EQUAL exp . [ IN ]
-- On SLASH_DOT shift to state 27
-- On SEMICOLON shift to state 57
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On LESS_GREATER shift to state 45
-- On LESS_EQUAL shift to state 47
-- On LESS shift to state 49
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On GREATER_EQUAL shift to state 51
-- On GREATER shift to state 53
-- On FLOAT shift to state 17
-- On EQUAL shift to state 55
-- On COMMA shift to state 59
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On IN reduce production fundef -> IDENT formal_args EQUAL exp 

State 73:
exp -> LET REC fundef . IN exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On IN shift to state 74

State 74:
exp -> LET REC fundef IN . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 75
-- On elems shift to state 32

State 75:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> LET REC fundef IN exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On SEMICOLON shift to state 57
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On LESS_GREATER shift to state 45
-- On LESS_EQUAL shift to state 47
-- On LESS shift to state 49
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On GREATER_EQUAL shift to state 51
-- On GREATER shift to state 53
-- On FLOAT shift to state 17
-- On EQUAL shift to state 55
-- On COMMA shift to state 59
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> LET REC fundef IN exp 
-- On RPAREN reduce production exp -> LET REC fundef IN exp 
-- On LPAREN reduce production exp -> LET REC fundef IN exp 
-- On INT reduce production exp -> LET REC fundef IN exp 
-- On IN reduce production exp -> LET REC fundef IN exp 
-- On IDENT reduce production exp -> LET REC fundef IN exp 
-- On FLOAT reduce production exp -> LET REC fundef IN exp 
-- On ELSE reduce production exp -> LET REC fundef IN exp 
-- On BOOL reduce production exp -> LET REC fundef IN exp 
-- On # reduce production exp -> LET REC fundef IN exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 76:
exp -> LET LPAREN . pat RPAREN EQUAL exp IN exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On IDENT shift to state 77
-- On pat shift to state 80

State 77:
pat -> IDENT . COMMA IDENT [ RPAREN COMMA ]
-- On COMMA shift to state 78

State 78:
pat -> IDENT COMMA . IDENT [ RPAREN COMMA ]
-- On IDENT shift to state 79

State 79:
pat -> IDENT COMMA IDENT . [ RPAREN COMMA ]
-- On RPAREN reduce production pat -> IDENT COMMA IDENT 
-- On COMMA reduce production pat -> IDENT COMMA IDENT 

State 80:
exp -> LET LPAREN pat . RPAREN EQUAL exp IN exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
pat -> pat . COMMA IDENT [ RPAREN COMMA ]
-- On RPAREN shift to state 81
-- On COMMA shift to state 86

State 81:
exp -> LET LPAREN pat RPAREN . EQUAL exp IN exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On EQUAL shift to state 82

State 82:
exp -> LET LPAREN pat RPAREN EQUAL . exp IN exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 83
-- On elems shift to state 32

State 83:
elems -> exp . COMMA exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . PLUS exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . MINUS exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . EQUAL exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS_GREATER exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . GREATER exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS_EQUAL exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . GREATER_EQUAL exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . PLUS_DOT exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . MINUS_DOT exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . AST_DOT exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . SLASH_DOT exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . actual_args [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> LET LPAREN pat RPAREN EQUAL exp . IN exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
-- On SLASH_DOT shift to state 27
-- On SEMICOLON shift to state 57
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On LESS_GREATER shift to state 45
-- On LESS_EQUAL shift to state 47
-- On LESS shift to state 49
-- On INT shift to state 14
-- On IN shift to state 84
-- On IDENT shift to state 16
-- On GREATER_EQUAL shift to state 51
-- On GREATER shift to state 53
-- On FLOAT shift to state 17
-- On EQUAL shift to state 55
-- On COMMA shift to state 59
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30

State 84:
exp -> LET LPAREN pat RPAREN EQUAL exp IN . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 85
-- On elems shift to state 32

State 85:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> LET LPAREN pat RPAREN EQUAL exp IN exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On SEMICOLON shift to state 57
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On LESS_GREATER shift to state 45
-- On LESS_EQUAL shift to state 47
-- On LESS shift to state 49
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On GREATER_EQUAL shift to state 51
-- On GREATER shift to state 53
-- On FLOAT shift to state 17
-- On EQUAL shift to state 55
-- On COMMA shift to state 59
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On SLASH_DOT reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On SEMICOLON reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On RPAREN reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On PLUS_DOT reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On PLUS reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On MINUS_DOT reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On MINUS reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On LPAREN reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On LESS_GREATER reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On LESS_EQUAL reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On LESS reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On INT reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On IN reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On IDENT reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On GREATER_EQUAL reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On GREATER reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On FLOAT reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On EQUAL reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On ELSE reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On COMMA reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On BOOL reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On AST_DOT reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
-- On # reduce production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
** Conflict on SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT

State 86:
pat -> pat COMMA . IDENT [ RPAREN COMMA ]
-- On IDENT shift to state 87

State 87:
pat -> pat COMMA IDENT . [ RPAREN COMMA ]
-- On RPAREN reduce production pat -> pat COMMA IDENT 
-- On COMMA reduce production pat -> pat COMMA IDENT 

State 88:
exp -> LET IDENT . EQUAL exp IN exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On EQUAL shift to state 89

State 89:
exp -> LET IDENT EQUAL . exp IN exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 90
-- On elems shift to state 32

State 90:
elems -> exp . COMMA exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . PLUS exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . MINUS exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . EQUAL exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS_GREATER exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . GREATER exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS_EQUAL exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . GREATER_EQUAL exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . PLUS_DOT exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . MINUS_DOT exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . AST_DOT exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . SLASH_DOT exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> LET IDENT EQUAL exp . IN exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . SEMICOLON exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
-- On SLASH_DOT shift to state 27
-- On SEMICOLON shift to state 57
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On LESS_GREATER shift to state 45
-- On LESS_EQUAL shift to state 47
-- On LESS shift to state 49
-- On INT shift to state 14
-- On IN shift to state 91
-- On IDENT shift to state 16
-- On GREATER_EQUAL shift to state 51
-- On GREATER shift to state 53
-- On FLOAT shift to state 17
-- On EQUAL shift to state 55
-- On COMMA shift to state 59
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30

State 91:
exp -> LET IDENT EQUAL exp IN . exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On error shift to state 1
-- On NOT shift to state 2
-- On MINUS_DOT shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On LET shift to state 7
-- On INT shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On ARRAY_CREATE shift to state 19
-- On simple_exp shift to state 23
-- On exp shift to state 92
-- On elems shift to state 32

State 92:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> LET IDENT EQUAL exp IN exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On SEMICOLON shift to state 57
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On LESS_GREATER shift to state 45
-- On LESS_EQUAL shift to state 47
-- On LESS shift to state 49
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On GREATER_EQUAL shift to state 51
-- On GREATER shift to state 53
-- On FLOAT shift to state 17
-- On EQUAL shift to state 55
-- On COMMA shift to state 59
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> LET IDENT EQUAL exp IN exp 
-- On RPAREN reduce production exp -> LET IDENT EQUAL exp IN exp 
-- On LPAREN reduce production exp -> LET IDENT EQUAL exp IN exp 
-- On INT reduce production exp -> LET IDENT EQUAL exp IN exp 
-- On IN reduce production exp -> LET IDENT EQUAL exp IN exp 
-- On IDENT reduce production exp -> LET IDENT EQUAL exp IN exp 
-- On FLOAT reduce production exp -> LET IDENT EQUAL exp IN exp 
-- On ELSE reduce production exp -> LET IDENT EQUAL exp IN exp 
-- On BOOL reduce production exp -> LET IDENT EQUAL exp IN exp 
-- On # reduce production exp -> LET IDENT EQUAL exp IN exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 93:
elems -> exp . COMMA exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . PLUS exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . MINUS exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . EQUAL exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS_GREATER exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . GREATER exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . LESS_EQUAL exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . GREATER_EQUAL exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . PLUS_DOT exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . MINUS_DOT exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . AST_DOT exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . SLASH_DOT exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . actual_args [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
exp -> exp . SEMICOLON exp [ SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT ]
simple_exp -> LPAREN exp . RPAREN [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On SEMICOLON shift to state 57
-- On RPAREN shift to state 94
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On LESS_GREATER shift to state 45
-- On LESS_EQUAL shift to state 47
-- On LESS shift to state 49
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On GREATER_EQUAL shift to state 51
-- On GREATER shift to state 53
-- On FLOAT shift to state 17
-- On EQUAL shift to state 55
-- On COMMA shift to state 59
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30

State 94:
simple_exp -> LPAREN exp RPAREN . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT # ]
-- On THEN reduce production simple_exp -> LPAREN exp RPAREN 
-- On SLASH_DOT reduce production simple_exp -> LPAREN exp RPAREN 
-- On SEMICOLON reduce production simple_exp -> LPAREN exp RPAREN 
-- On RPAREN reduce production simple_exp -> LPAREN exp RPAREN 
-- On PLUS_DOT reduce production simple_exp -> LPAREN exp RPAREN 
-- On PLUS reduce production simple_exp -> LPAREN exp RPAREN 
-- On MINUS_DOT reduce production simple_exp -> LPAREN exp RPAREN 
-- On MINUS reduce production simple_exp -> LPAREN exp RPAREN 
-- On LPAREN reduce production simple_exp -> LPAREN exp RPAREN 
-- On LESS_GREATER reduce production simple_exp -> LPAREN exp RPAREN 
-- On LESS_EQUAL reduce production simple_exp -> LPAREN exp RPAREN 
-- On LESS reduce production simple_exp -> LPAREN exp RPAREN 
-- On INT reduce production simple_exp -> LPAREN exp RPAREN 
-- On IN reduce production simple_exp -> LPAREN exp RPAREN 
-- On IDENT reduce production simple_exp -> LPAREN exp RPAREN 
-- On GREATER_EQUAL reduce production simple_exp -> LPAREN exp RPAREN 
-- On GREATER reduce production simple_exp -> LPAREN exp RPAREN 
-- On FLOAT reduce production simple_exp -> LPAREN exp RPAREN 
-- On EQUAL reduce production simple_exp -> LPAREN exp RPAREN 
-- On ELSE reduce production simple_exp -> LPAREN exp RPAREN 
-- On DOT reduce production simple_exp -> LPAREN exp RPAREN 
-- On COMMA reduce production simple_exp -> LPAREN exp RPAREN 
-- On BOOL reduce production simple_exp -> LPAREN exp RPAREN 
-- On AST_DOT reduce production simple_exp -> LPAREN exp RPAREN 
-- On # reduce production simple_exp -> LPAREN exp RPAREN 

State 95:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> MINUS exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On LPAREN shift to state 5
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> MINUS exp 
-- On SLASH_DOT reduce production exp -> MINUS exp 
-- On SEMICOLON reduce production exp -> MINUS exp 
-- On RPAREN reduce production exp -> MINUS exp 
-- On PLUS_DOT reduce production exp -> MINUS exp 
-- On PLUS reduce production exp -> MINUS exp 
-- On MINUS_DOT reduce production exp -> MINUS exp 
-- On MINUS reduce production exp -> MINUS exp 
-- On LPAREN reduce production exp -> MINUS exp 
-- On LESS_GREATER reduce production exp -> MINUS exp 
-- On LESS_EQUAL reduce production exp -> MINUS exp 
-- On LESS reduce production exp -> MINUS exp 
-- On INT reduce production exp -> MINUS exp 
-- On IN reduce production exp -> MINUS exp 
-- On IDENT reduce production exp -> MINUS exp 
-- On GREATER_EQUAL reduce production exp -> MINUS exp 
-- On GREATER reduce production exp -> MINUS exp 
-- On FLOAT reduce production exp -> MINUS exp 
-- On EQUAL reduce production exp -> MINUS exp 
-- On ELSE reduce production exp -> MINUS exp 
-- On COMMA reduce production exp -> MINUS exp 
-- On BOOL reduce production exp -> MINUS exp 
-- On AST_DOT reduce production exp -> MINUS exp 
-- On # reduce production exp -> MINUS exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 96:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> MINUS_DOT exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On LPAREN shift to state 5
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> MINUS_DOT exp 
-- On SLASH_DOT reduce production exp -> MINUS_DOT exp 
-- On SEMICOLON reduce production exp -> MINUS_DOT exp 
-- On RPAREN reduce production exp -> MINUS_DOT exp 
-- On PLUS_DOT reduce production exp -> MINUS_DOT exp 
-- On PLUS reduce production exp -> MINUS_DOT exp 
-- On MINUS_DOT reduce production exp -> MINUS_DOT exp 
-- On MINUS reduce production exp -> MINUS_DOT exp 
-- On LPAREN reduce production exp -> MINUS_DOT exp 
-- On LESS_GREATER reduce production exp -> MINUS_DOT exp 
-- On LESS_EQUAL reduce production exp -> MINUS_DOT exp 
-- On LESS reduce production exp -> MINUS_DOT exp 
-- On INT reduce production exp -> MINUS_DOT exp 
-- On IN reduce production exp -> MINUS_DOT exp 
-- On IDENT reduce production exp -> MINUS_DOT exp 
-- On GREATER_EQUAL reduce production exp -> MINUS_DOT exp 
-- On GREATER reduce production exp -> MINUS_DOT exp 
-- On FLOAT reduce production exp -> MINUS_DOT exp 
-- On EQUAL reduce production exp -> MINUS_DOT exp 
-- On ELSE reduce production exp -> MINUS_DOT exp 
-- On COMMA reduce production exp -> MINUS_DOT exp 
-- On BOOL reduce production exp -> MINUS_DOT exp 
-- On AST_DOT reduce production exp -> MINUS_DOT exp 
-- On # reduce production exp -> MINUS_DOT exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 97:
elems -> exp . COMMA exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> NOT exp . [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT # ]
-- On LPAREN shift to state 5
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On FLOAT shift to state 17
-- On BOOL shift to state 18
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On THEN reduce production exp -> NOT exp 
-- On SLASH_DOT reduce production exp -> NOT exp 
-- On SEMICOLON reduce production exp -> NOT exp 
-- On RPAREN reduce production exp -> NOT exp 
-- On PLUS_DOT reduce production exp -> NOT exp 
-- On PLUS reduce production exp -> NOT exp 
-- On MINUS_DOT reduce production exp -> NOT exp 
-- On MINUS reduce production exp -> NOT exp 
-- On LPAREN reduce production exp -> NOT exp 
-- On LESS_GREATER reduce production exp -> NOT exp 
-- On LESS_EQUAL reduce production exp -> NOT exp 
-- On LESS reduce production exp -> NOT exp 
-- On INT reduce production exp -> NOT exp 
-- On IN reduce production exp -> NOT exp 
-- On IDENT reduce production exp -> NOT exp 
-- On GREATER_EQUAL reduce production exp -> NOT exp 
-- On GREATER reduce production exp -> NOT exp 
-- On FLOAT reduce production exp -> NOT exp 
-- On EQUAL reduce production exp -> NOT exp 
-- On ELSE reduce production exp -> NOT exp 
-- On COMMA reduce production exp -> NOT exp 
-- On BOOL reduce production exp -> NOT exp 
-- On AST_DOT reduce production exp -> NOT exp 
-- On # reduce production exp -> NOT exp 
** Conflict on LPAREN INT IDENT FLOAT BOOL

State 98:
exp' -> exp . [ # ]
elems -> exp . COMMA exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT # ]
exp -> exp . PLUS exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT # ]
exp -> exp . MINUS exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT # ]
exp -> exp . EQUAL exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT # ]
exp -> exp . LESS_GREATER exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT # ]
exp -> exp . LESS exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT # ]
exp -> exp . GREATER exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT # ]
exp -> exp . LESS_EQUAL exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT # ]
exp -> exp . GREATER_EQUAL exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT # ]
exp -> exp . PLUS_DOT exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT # ]
exp -> exp . MINUS_DOT exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT # ]
exp -> exp . AST_DOT exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT # ]
exp -> exp . SLASH_DOT exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT # ]
exp -> exp . actual_args [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT # ]
exp -> exp . SEMICOLON exp [ SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT # ]
-- On SLASH_DOT shift to state 27
-- On SEMICOLON shift to state 57
-- On PLUS_DOT shift to state 35
-- On PLUS shift to state 39
-- On MINUS_DOT shift to state 41
-- On MINUS shift to state 43
-- On LPAREN shift to state 5
-- On LESS_GREATER shift to state 45
-- On LESS_EQUAL shift to state 47
-- On LESS shift to state 49
-- On INT shift to state 14
-- On IDENT shift to state 16
-- On GREATER_EQUAL shift to state 51
-- On GREATER shift to state 53
-- On FLOAT shift to state 17
-- On EQUAL shift to state 55
-- On COMMA shift to state 59
-- On BOOL shift to state 18
-- On AST_DOT shift to state 37
-- On simple_exp shift to state 29
-- On actual_args shift to state 30
-- On # accept exp

State 1 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> error 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 6 has an end-of-stream conflict. There is a tension between
(1) reducing production simple_exp -> LPAREN RPAREN 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT,
which would require some other action.

State 14 has an end-of-stream conflict. There is a tension between
(1) reducing production simple_exp -> INT 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT,
which would require some other action.

State 16 has an end-of-stream conflict. There is a tension between
(1) reducing production simple_exp -> IDENT 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT,
which would require some other action.

State 17 has an end-of-stream conflict. There is a tension between
(1) reducing production simple_exp -> FLOAT 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT,
which would require some other action.

State 18 has an end-of-stream conflict. There is a tension between
(1) reducing production simple_exp -> BOOL 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT,
which would require some other action.

State 23 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> simple_exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT,
which would require some other action.

State 28 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> exp SLASH_DOT exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 29 has an end-of-stream conflict. There is a tension between
(1) reducing production actual_args -> simple_exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT,
which would require some other action.

State 30 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> exp actual_args 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 31 has an end-of-stream conflict. There is a tension between
(1) reducing production actual_args -> actual_args simple_exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT,
which would require some other action.

State 32 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> elems 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 34 has an end-of-stream conflict. There is a tension between
(1) reducing production elems -> elems COMMA exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 36 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> exp PLUS_DOT exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 38 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> exp AST_DOT exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 40 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> exp PLUS exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 42 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> exp MINUS_DOT exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 44 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> exp MINUS exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 46 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> exp LESS_GREATER exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 48 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> exp LESS_EQUAL exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 50 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> exp LESS exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 52 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> exp GREATER_EQUAL exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 54 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> exp GREATER exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 56 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> exp EQUAL exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 58 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> exp SEMICOLON exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 60 has an end-of-stream conflict. There is a tension between
(1) reducing production elems -> exp COMMA exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 61 has an end-of-stream conflict. There is a tension between
(1) reducing production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_MINUS LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT,
which would require some other action.

State 63 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> simple_exp DOT LPAREN exp RPAREN LESS_MINUS exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 65 has an end-of-stream conflict. There is a tension between
(1) reducing production simple_exp -> simple_exp DOT LPAREN exp RPAREN 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT,
which would require some other action.

State 66 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> ARRAY_CREATE simple_exp simple_exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT,
which would require some other action.

State 71 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> IF exp THEN exp ELSE exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 75 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> LET REC fundef IN exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 85 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> LET LPAREN pat RPAREN EQUAL exp IN exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 92 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> LET IDENT EQUAL exp IN exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 94 has an end-of-stream conflict. There is a tension between
(1) reducing production simple_exp -> LPAREN exp RPAREN 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE DOT COMMA BOOL AST_DOT,
which would require some other action.

State 95 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> MINUS exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 96 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> MINUS_DOT exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 97 has an end-of-stream conflict. There is a tension between
(1) reducing production exp -> NOT exp 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of THEN SLASH_DOT SEMICOLON RPAREN PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IN IDENT GREATER_EQUAL GREATER FLOAT EQUAL ELSE COMMA BOOL AST_DOT,
which would require some other action.

State 98 has an end-of-stream conflict. There is a tension between
(1) accepting exp
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of SLASH_DOT SEMICOLON PLUS_DOT PLUS MINUS_DOT MINUS LPAREN LESS_GREATER LESS_EQUAL LESS INT IDENT GREATER_EQUAL GREATER FLOAT EQUAL COMMA BOOL AST_DOT,
which would require some other action.

